FORMAT: 1A

# eKB APIs for LinkedData.Center
![e-artspace logo](http://www.e-artspace.com/home/images/stories/ea/ealogo-small.png)

## Overview

eKB is a set of RESTful APIs designed by [LinkedData.Center](LinkedData.Center) to populate and
query a knowledge base compliant with the [W3C RDF standard](http://www.w3.org/TR/rdf11-primer/) 
and with the [Knowledge Exchange Engine Service (KEES) architecture](http://www.e-artspace.com/home/project/kees).


| Resource              | GET | PUT | POST | DELETE | Service Description |
|-----------------------|-----|-----|------|--------|-------------|
| /{kb}                 | X   | X   |      | X      | Knowledge base configuration |
| /{kb}/version         | X   | X   |      |        | Knowledge base version management |
| /{kb}/sparql          | X   |     | X    |        | Sparql 1.1 Query endpoint | 
| /{kb}/sparql/update   | X   |     | X    |        | Sparql 1.1 Update endpoint |
| /{kb}/activities      | X   |     | X    | X      | data ingestion planning and monitoring |
| /{kb}/activity/{id}   | X   |     |      | X      | data ingestion task |
| /{kb}/user/{user}/pwd |     | X   |      |        | user password management |

## The knowledge base
eKB implements a semantic system where infomation is described as a set of 
statement according with the W3C standard 
[Resource Description Framework (RDF)](http://www.w3.org/TR/rdf11-primer/).

There are two disjonined set of statemens. *TBox* and *ABox*.
Together ABox and TBox make up the whole *knowledge base*:

 - TBox statements describe a system in terms of controlled vocabularies, 
for example, a set of classes and properties such as:
**All Students are Persons** or **There are two types of Persons: Students and Teachers**.

 - ABox are TBox-compliant statements about that vocabulary. 
ABox statements describe facts about things, using vocabularies defined in Tbox such as
**John is a Person** or **Mary has blue eyes**.

In other words, TBox statements are sometimes associated with object-oriented 
classes and ABox statements associated with instances of those classes.

eKB manages both TBox and ABox statemenst.

TBox statements tend to be more permanent within a knowledge base and so they are loaded during
the knowledge base initialization (KEES booting window). 
In contrast, ABox statements are much more dynamic in nature and they are reloaded (only if changed)
during the KEES learning window. A special type of ABox statements are those that are inferred
during the KEES Reasoning windows evaluating axioms and rules contained into TBox.

eKB always traks the provenance of each statement in ABox storing all information
as linked data in a graph database (quadstore).

## Configuration
A *Knowledge Base configuration* is a collection of metadata that describe
TBox or Abox Statements.

The [KEES Ontology](http://ontology.it/kees/v1) and [VoID ontology](http://www.w3.org/TR/void/)
define the vocabularies used to express the knowlege base configuration.

TBox resources divide into *Vocabularies* and *Rules*.

Both Vocabularies and Rules statements are stored in the default graph of the graph database.
All appliable rules are executed during the KEES Reasoning windows. 

All ABox statemenst lives in named graphs.

All knowlege base metadata is stored in *urn:kees* named graph.

All inferred triples are stored in *urn:kees:reasoning* named graph.

All information about learning and reasoning tasks are stored in 
*urn:kees:actvities* named graph.


A minimal KB configuration is like:

    <urn:kees:kb> void:subset 
            [ kees:source <http://data.example.com/file1.ttl> ]
            [ kees:source <http://data.example.com/file2.ttl> ] ;
    .
    
A more detailed KB configuration is like:

    <urn:kees:kb>
        dcterms:title "demo" ;
        dcterms:description "Contains a partial copy of dbpedia"@en ;
        dcterms:license <http://www.opendatacommons.org/odc-public-domain-dedication-and-licence/>;
        wv:norms <http://www.opendatacommons.org/norms/odc-by-sa/>;
        void:exampleResource 
            <http://dbpedia.org/resource/Berlin> , 
            <http://dbpedia.org/resource/Physics> ,
            <http://dbpedia.org/resource/Ludwig_van_Beethoven> ;

        #TBox
        void:vocabulary <http://purl.org/goodrelations/v1.owl>;
        kees:rule
            [
                a kees:Rule ;
                kees:ruleContent   """
                    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
                    PREFIX gr: <http://purl.org/goodrelations/v1#>
                    PREFIX :<urn:test:>
                    IF {
                        ?offering gr:hasPriceSpecification ?ps .
                        ?ps gr:hasCurrencyValue ?price .
                        FILTER (?price >= 200.00).
                    }
                    THEN {
                        ?offering a :ExpensiveProduct .
                    }
               """.
            ]
        ;
           
        # ABox
        void:subset 
            [
                a kees:ABoxGraph;
                kees:source <http://data.example.com/file1.ttl> ;
                kees:accrualPeriodicity kees:montly ;
                kees:accrualPolicy kees:simpleLearning ;
            ],
            [ kees:source <http://data.example.com/file2.ttl> ] ;
    .

    
The knowledge base configuration is always initialized with:

    <urn:kees:kb> a kees:KnowledgeBase ;
        foaf:homepage <> ;
        void:feature 
            <http://www.w3.org/ns/formats/RDF_XML> ,
            <http://www.w3.org/ns/formats/Turtle> ,
            <http://www.w3.org/ns/formats/N-Triples> ;
        void:sparqlEndpoint <sparql>;
    .

## Autentication

To access eKB APIs you always need to provide your LinkedData.Center credentials using
[http basic authentication](http://en.wikipedia.org/wiki/Basic_access_authentication):

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.


## Content negotiation
All eKB APIs supports [http content negotiation](http://en.wikipedia.org/wiki/Content_negotiation) 
for state representation rendering.

## Server Responses

Following table sumarize typical http status code returned by APIS

| Code | Description                                                                                     | 
|------|-------------------------------------------------------------------------------------------------|
| 200  | Request was successful                                                                          |
| 201  | Request was successful and the resource was created                                             |
| 202  | Request was successfully queued                                                                 |
| 400  | Indicates parse errors or that the transaction identifier specified for an operation is invalid or does not correspond to a known transaction. |
| 401  | Request is unauthorized.                                                                        |
| 403  | User attempting to perform the operation does not exist, their username or password is invalid, or they do not have the proper credentials to perform the action. |
| 404  | A resource involved in the operation, such as a user or transaction, does not exist.            |
| 405  | Requested method is not supported.                                                              |
| 409  | A conflict for some database operations; for example, creating a database that already exists.  |
| 500  | An unspecified failure in the server.                                                           |
| 503  | The eKB serve is learnig new resources or is reasoning. Sparql interface is temporary disabled. |

Error representation is based on [ietf specs](http://tools.ietf.org/html/draft-nottingham-http-problem-07).
Here is an example of a 404 error in json representation:

       HTTP/1.1 404 Not found
       Content-Type: application/problem+json
       Content-Language: en

        {
            problemType: "http://dbpedia.org/resource/Category:HTTP_status_codes"
            title: "Job not found"
            detail: "Job report 5441392469671 not found."
            problemInstance: "http://dbpedia.org/resource/HTTP_404"
            httpStatus: 404
        }


## Protection from inconsistent data

The knowledge base may be in a state temporarily inconsistent during the phases 
of acquisition of new data (learning window) or during the steps of the inference
computation (reasoning window).
During these temporary windows, the result of the query to the knowledge base may be incorrect.

The endpoint is protected by a guard that prevents query during learning and reasoning windows. 
In these cases, any access to the endpoint receives a 503 error (Service Unavailable). 


## Knowledge base configuration [/{kb}]

+ Parameters
    + kb (required, string, `demo`) ... `id` of the Knowlege base  

### Get configuration [GET]

Returns the current knowledge base config.

+ Request (text/turtle)

    + Headers
    
            Accept: text/turtle
            
+ Response 200


    + Body
    
            @prefix void: <http://rdfs.org/ns/void#> .
            @prefix foaf: <http://xmlns.com/foaf/0.1/> ..
            @prefix kees: <http://ontology.it/kees/v1#> .
            
            # created by boot windows
            <urn:kees:kb> a kees:KnowledgeBase ;
                foaf:homepage <> ;
                void:feature 
                    <http://www.w3.org/ns/formats/RDF_XML> ,
                    <http://www.w3.org/ns/formats/Turtle> ,
                    <http://www.w3.org/ns/formats/N-Triples> ;
                void:sparqlEndpoint <sparql>;
            .



### Change current configuration [PUT]

Substitutes the knowledge base configuration with the request body content.

+ Request (text/turtle)
            
    + Body

            [] a kees:KnowledgeBase ;
                void:subset 
                    [ kees:source <http://data.example.com/file1.ttl> ]
                    [ kees:source <http://data.example.com/file2.ttl> ] ;
            .    
            
+ Response 200

    + Body
    
            true

            
### Empty the configuration [DELETE]

This API delete knowledge base configuration. It is equivalent to a call to
*sparql/update* with command: DROP SILENT ALL 

+ Response 200 (text/boolean)

    + Body
    
            true


## Knowledge base version management [/{kb}/version]

+ Parameters
    + kb (required, string, `demo`) ... `id` of the Knowlege base  

### Get version [GET]

Returns the current knowledge base version id. The version id is an unixtime stamp
relatetd to the last knowlege base update action.

            
+ Response 200 (text/plain)


    + Body
    
            1428123456



### Set a new knowledge base version id [PUT]

Substitute the knowledge base version id with the request body content. This action is equivalet 
to create a new knowlege base configuration specifiing a <http://purl.org/dc/terms/identifier>
attribute.

This request forces internal caches to be revalidated.

+ Request (text/plain)
            
    + Body

            1428123457    
            
+ Response 200 (text/boolean)

    + Body
    
            true

            

## SPARQL 1.1 Query endpoint [/{kb}/sparql{?query}]

This end point implements [SPARQL 1.1 protocol query operations](http://www.w3.org/TR/sparql11-protocol/#query-operation) 
for [query language](http://www.w3.org/TR/sparql11-query/) specifications.

Fully supports [http content negotiation](http://en.wikipedia.org/wiki/Content_negotiation)
for state representation rendering.

All HTTP requests that are mutative (add or remove) must include a valid Content-Type header set to the MIME type of the request body,
 where “valid” is a valid MIME type for N-Triples(text/plain), Turtle (application/x-turtle or text/turtle), NQuads (text/x-nquads), JSON-LD(application/ld+json), or RDF/XML (application/rdf+xml).
 
Depending from SPARQL query, following MIME types are recognized in the Accept header, for example:

| Query type | Supported MIMETYPE in Accept header                                                                |
|------------|----------------------------------------------------------------------------------------------------|
| SELECT     | application/sparql-results+xml OR application/sparql-results+json                                  |
| ASK        | application/sparql-results+xml OR text/boolean                                                                                       |
| CONSTRUCT or DESCRIBE | application/rdf+xml OR text/turtle OR application/x-turtle OR text/x-nquads OR application/ld+json |


+ Parameters
    + kb (required, string, `demo`) ... `id` of the Knowlege base  


+ Model (application/sparql-results+xml)

    See [SPARQL Query Results XML Format](http://www.w3.org/TR/rdf-sparql-XMLres/) for more info.
            
    + Body

            <?xml version='1.0' encoding='UTF-8'?>
            <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
                <head>
                    <variable name='s'/>
                    <variable name='p'/>
                    <variable name='o'/>
                </head>
                <results>
                </results>
            </sparql> 

### SPARQL query via get [GET]

It supports both Sparql Query and 
[Service Description](http://www.w3.org/TR/sparql11-service-description/) protocols.

To get Service description call the end-point withouth any paramethers

+ Parameters
    + query (optional, string, `SELECT%20*%20WHERE%20%7B%3Fs%20%3Fp%20%3Fo%7D`) ... url encoded sparql query.

+ Request

    + Headers
    
            Accept: application/sparql-results+xml
            
+ Response 200

    [SPARQL 1.1 Query endpoint][]



### SPARQL query via post [POST]
Post action can be used for queries whose length exceeds the maximum allowed number of characters in a URI.
The body of the request should be same form-encoded parameters of the GET variant.

It supports also unencoded paylout when  Content-Type header is set to "application/sparql-query"



+ Request (application/sparql-query)

    + Headers
    
            Accept: application/sparql-results+xml

    + Body

            SELECT * WHERE {
                ?s ?p ?o
            }
            
+ Response 200

    [SPARQL 1.1 Query endpoint][]



## SPARQL 1.1 Update endpoint [/{kb}/sparql/update]

This end point implements [SPARQL 1.1 protocol update operations](http://www.w3.org/TR/sparql11-protocol/#update-operation) 
for [update language](http://www.w3.org/TR/sparql11-update/) specifications.

SPARQL update endpoint support [http content negotiation](http://en.wikipedia.org/wiki/Content_negotiation) for state representation rendering.

All HTTP requests that are mutative (add or remove) must include a valid Content-Type header set to the MIME type of the request body,
 where “valid” is a valid MIME type for application/sparql-results+xml OR text/boolean .



+ Parameters
    + kb (required, string, `demo`) ... `id` of the Knowlege base  


### SPARQL update via get [GET]

This verbs supports [Service Description](http://www.w3.org/TR/sparql11-service-description/) specification.

+ Request

    + Headers
    
            Accept: text/turtle
            
+ Response 200

            _:node19hbsroj2x226 a <http://www.w3.org/ns/sparql-service-description#Service> ;
                <http://www.w3.org/ns/sparql-service-description#endpoint> "https://hub1.linkeddata.center/test/sparql/update" ;
                <http://www.w3.org/ns/sparql-service-description#supportedLanguage> <http://www.w3.org/ns/sparql-service-description#SPARQL11Update> ;
                <http://www.w3.org/ns/sparql-service-description#defaultEntailmentRegime> <http://www.w3.org/ns/entailment/OWL-Direct> ;
                <http://www.w3.org/ns/sparql-service-description#supportedEntailmentProfile> <http://www.w3.org/ns/owl-profile/RDFS> , <http://www.w3.org/ns/owl-profile/QL> , <http://www.w3.org/ns/owl-profile/RL> , <http://www.w3.org/ns/owl-profile/EL> , <http://www.w3.org/ns/owl-profile/DL> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/RDF_XML> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/RDF_XML> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/Turtle> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/Turtle> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/N3> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/N3> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/N_Triples> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/N_Triples> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/NQuads> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/NQuads> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/Trig> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/Trig> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/Trix> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/Trix> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/JSON_LD> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/JSON_LD> , <http://www.w3.org/ns/formats/SPARQL_Results_XML> , <http://www.w3.org/ns/formats/SPARQL_Results_JSON> , <http://www.w3.org/ns/formats/SPARQL_Results_CSV> , <http://www.w3.org/ns/formats/SPARQL_Results_TSV> ;
                <http://www.w3.org/ns/sparql-service-description#extensionFunction> <http://jena.hpl.hp.com/ARQ/property#textMatch> ;
            
            _:node19hbsroj2x227 a <http://www.w3.org/ns/sparql-service-description#Dataset> .
            
            _:node19hbsroj2x228 a <http://www.w3.org/ns/sparql-service-description#Graph> ;
                <http://rdfs.org/ns/void#triples> "0"^^<http://www.w3.org/2001/XMLSchema#long> .
            
            _:node19hbsroj2x227 <http://www.w3.org/ns/sparql-service-description#defaultGraph> _:node19hbsroj2x228 .
            
            _:node19hbsroj2x229 a <http://www.w3.org/ns/sparql-service-description#Graph> ;
                <http://www.w3.org/ns/sparql-service-description#name> <urn:kees> ;
                <http://rdfs.org/ns/void#triples> "0"^^<http://www.w3.org/2001/XMLSchema#long> .
            
            _:node19hbsroj2x227 <http://www.w3.org/ns/sparql-service-description#namedGraph> _:node19hbsroj2x229 .
            
            _:node19hbsroj2x226 <http://www.w3.org/ns/sparql-service-description#defaultDataset> _:node19hbsroj2x227 .


### SPARQL update via post [POST]
The body of the request should be same form-encoded parameters of the GET variant.

It supports also unencoded paylout when  Content-Type header is set to "application/sparql-update"

+ Parameters
    + update (optional, string, `DROP%20ALL`) ... url encoded sparql query.



+ Request (application/sparql-update)

    + Body

            DROP ALL
            
+ Response 200

    See [SPARQL Query Results XML Format](http://www.w3.org/TR/rdf-sparql-XMLres/) for more info.
            
    + Body

            <?xml version='1.0' encoding='UTF-8'?>
            <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
                <head>
                </head>
                <boolean>true</boolean>
            </sparql>



## Data ingestion planning and monitoring [/{kb}/activities{?filter}]

This endpoint allows to populate the knowledge base by driving all four KEES windows 
(Booting, Learning and Reasoning) . 

Tasks are executed asyncronusly as soon as there  are enough resources available in the system.

Each task is provided with an unique id in the knowledge base. 
The task state can be inspected before, after and during execution.
Tasks information is stored in <urn:kees:activities> named graph.
By default, task reports are retained for one day before to be purged.

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.


### List activities [GET]
Lists tasks (pending, running and complete). 

+ Parameters
    + filter (optional, string, `running`) ... show only task in a defined status.
    
        + Values
            + `all`
            + `pending`
            + `running`
            + `completed`
            + `tobepurged`



+ Response 200 (Application/json)
            
    + Body
    
            {"TBD"}


### Start a KEES cycle activity [POST]
Ask for a new kees cicle to be executed as soon as possible.

Accepts following x-www-form-urlencoded vars:

| var       | default| type              | description                         |
|-----------|------- |-------------------|-------------------------------------|
| booting   | false  | 'true' or 'false' | Request booting window processing   |
| learning  | true   | 'true' or 'false' | Request learning window processing  |
| reasoning | true   | 'true' or 'false' | Request reasoning window processing |

+ Request (application/x-www-form-urlencoded)

    + Body

            booting=false&learning=true&reasoning=true
        
+ Response 200
            
    + Body
    
            true

### Delete data ingestion activities [DELETE]

Deletes all pending tasks. With no parameters delete activities that have to be purged. 

+ Parameters
    + filter (optional, string, `tobepurged`) ... delete only task in a defined status.
    
        + Values
            + `all`
            + `pending`
            + `running`
            + `complete`
            + `tobepurged`


            
+ Response 200

        true


## Data ingestion activity [/{kb}/activity/{activityId}]

Shows or delete a specific activity . 

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.


### Show activity [GET]
Lists tasks (pending, running and complete). 


+ Response 200 (text/turtle)
            
    + Body
    
            # TBD


### Delete activity [DELETE]
Deletes the activity. 

+ Response 200

        true





## Change authentication password [/{kb}/user/{user}/pwd]
Changes the password of the knowledge admin user.

*Password requirements*:
   at least 6 characters and maximum of 20,
   must contains one digit from 0-9,
   must contains one lowercase characters,
   must contains one uppercase characters,
   must contains one special symbols in the list **@#$%**.


+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + kb (required, string, `demo`) ... `id` of the user (same as Knowlege base kb) 
    + user (required, string, `admin`) ... `id` of the user (same as Knowlege base kb)

### Change user password [PUT]
+ Request

    + Body
    
            Newpassword#1
            
+ Response 200

    + Body
    
            true

