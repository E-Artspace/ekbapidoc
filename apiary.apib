FORMAT: 1A

# eKB APIs for LinkedData.Center
[![LinkedData.Center logo](http://LinkedData.Center/home/images/logo.png)](http://linkeddata.center/)

## Overview

eKB is a set of RESTful APIs designed by [LinkedData.Center](http://LinkedData.Center/) to populate and
query a knowledge base compliant with the [Semantic Web](http://www.w3.org/standards/semanticweb/) technologies. 


| Resource              | GET | PUT | POST | DELETE | Service Description |
|-----------------------|-----|-----|------|--------|-------------|
| /{kb}                 | X   | X   |      | X      | Knowledge base configuration |
| /{kb}/version         | X   | X   |      |        | Knowledge base version management |
| /{kb}/sparql          | X   |     | X    |        | Sparql 1.1 Query endpoint | 
| /{kb}/sparql/update   | X   |     | X    |        | Sparql 1.1 Update endpoint |
| /{kb}/activities      | X   |     | X    | X      | data ingestion planning and monitoring |
| /{kb}/activity/{id}   | X   |     |      | X      | data ingestion tasks |
| /{kb}/user/{user}/pwd |     | X   |      |        | user password management |


LinkedData.Center provides an instance of a graph database where infomation are organized in as a set
of RDF named graphs. Together all named graphs make up a **knowledge base**

eKB APIs recognize a *Knowledge Base Configuration* described with the [KEES Language Profile](http://LinkedData.Center/kees). 

A minimal KB configuration is like:

    @prefix kees: <http://linkeddata.center/kees/v1#> .
    [] kees:source <http://data.example.com/file1.ttl> ] .

See [more examples of configuration description in this article](http://linkeddata.center/help/devop/kees-profile).    
    
## Autentication

To access eKB APIs you always need to provide your LinkedData.Center credentials using
[http basic authentication](http://en.wikipedia.org/wiki/Basic_access_authentication):

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.


## Content negotiation
All eKB APIs supports [http content negotiation](http://en.wikipedia.org/wiki/Content_negotiation) 
for state representation rendering.

## Server Responses

Following table sumarize typical http status code returned by APIS

| Code | Description                                                                                     | 
|------|-------------------------------------------------------------------------------------------------|
| 200  | Request was successful                                                                          |
| 201  | Request was successful and the resource was created                                             |
| 202  | Request was successfully queued                                                                 |
| 400  | Indicates parse errors or that the transaction identifier specified for an operation is invalid or does not correspond to a known transaction. |
| 401  | Request is unauthorized.                                                                        |
| 403  | User attempting to perform the operation does not exist, their username or password is invalid, or they do not have the proper credentials to perform the action. |
| 404  | A resource involved in the operation, such as a user or transaction, does not exist.            |
| 405  | Requested method is not supported.                                                              |
| 406  | Content negotiation can't be fulfilled  (i.e. the "Accept" header is not valid )                |
| 409  | A conflict for some database operations; for example, creating a database that already exists.  |
| 500  | An unspecified failure in the server.                                                           |
| 503  | The eKB serve is learnig new resources or is reasoning. Sparql interface is temporary disabled. |

Error representation is based on [ietf specs](http://tools.ietf.org/html/draft-nottingham-http-problem-07).
Here is an example of a 404 error in json representation:

       HTTP/1.1 404 Not found
       Content-Type: application/problem+json
       Content-Language: en

        {
            problemType: "http://dbpedia.org/resource/Category:HTTP_status_codes"
            title: "Job not found"
            detail: "Job report 5441392469671 not found."
            problemInstance: "http://dbpedia.org/resource/HTTP_404"
            httpStatus: 404
        }

The detail field contains the entire tracing report of all involved computation steps.


## Protection from inconsistent data

The knowledge base may be in a state temporarily inconsistent during the phases 
of acquisition of new facts (learning window) and during the computation of inferred 
data (reasoning window).

During these windows, queryies results may be incorrect. For this reason the endpoint is 
protected by a guard that prevents access to the knowledge base while it is learning and reasoning. 

In such cases, any access to the endpoint receives a 503 error (Service Unavailable). 


## Knowledge Base management [/{kb}]

This API allows to set/modify and delete a Knowledge Base and its configuration.

+ Parameters
    + kb (required, string, `demo`) ... `id` of the Knowlege base  

### Get Knowledge Base configuration [GET]

Returns the knowledge base configuration as an RDF document.

+ Request (text/turtle)

    + Headers
    
            Accept: text/turtle
            
+ Response 200


    + Body
    
            @prefix void: <http://rdfs.org/ns/void#> .
            @prefix foaf: <http://xmlns.com/foaf/0.1/> ..
            @prefix kees: <http://ontology.it/kees/v1#> .
            
            # created by boot windows
            <urn:kees:kb> a kees:KnowledgeBase ;
                foaf:homepage <> ;
                void:feature 
                    <http://www.w3.org/ns/formats/RDF_XML> ,
                    <http://www.w3.org/ns/formats/Turtle> ,
                    <http://www.w3.org/ns/formats/N-Triples> ;
                void:sparqlEndpoint <sparql>;
            .



### Change Knowledge Base configuration [PUT]

Substitutes the knowledge base configuration with the request body content. All missing properties and default
values are inferred from kees ontology restrictions and axioms.

+ Request (text/turtle)
            
    + Body

            [] a kees:KnowledgeBase ;
                void:subset 
                    [ kees:source <http://data.example.com/file1.ttl> ]
                    [ kees:source <http://data.example.com/file2.ttl> ] ;
            .    
            
+ Response 200

    + Body
    
            true

            
### Empty the Knowledge Base [DELETE]

This API delete knowledge base configuration. It is equivalent to a call to
*sparql/update* with command: DROP SILENT ALL 

+ Response 200 (text/boolean)

    + Body
    
            true


## Knowledge Base version management [/{kb}/version]

Knowledge Base has a version id, the version id change after a SPARQL update or after a
new data ingestion cycle. This API allows to manage Knowlege Base versions.

+ Parameters
    + kb (required, string, `demo`) ... `id` of the Knowlege base  

### Get Knowledge Base version id [GET]

Returns the current knowledge base version id. The version id is an unix time stamp
relatetd to the last knowlege base update action.

            
+ Response 200 (text/plain)


    + Body
    
            1428123456



### Change Knowledge Base version id [PUT]

Substitute the knowledge base version id with the request body content. This action is equivalet 
to create a new knowlege base configuration specifying a <http://purl.org/dc/terms/identifier>
attribute.

This request forces internal caches to be revalidated.

+ Request (text/plain)
            
    + Body

            1428123457    
            
+ Response 200 (text/boolean)

    + Body
    
            true

            

## SPARQL 1.1 Query [/{kb}/sparql{?query}]

This API implements [SPARQL 1.1 protocol query operations](http://www.w3.org/TR/sparql11-protocol/#query-operation) 
for [query language](http://www.w3.org/TR/sparql11-query/) specifications.

Fully supports [http content negotiation](http://en.wikipedia.org/wiki/Content_negotiation)
for state representation rendering.

All HTTP requests that are mutative (add or remove) must include a valid Content-Type header set to the MIME type of the request body,
 where “valid” is a valid MIME type for N-Triples(text/plain), Turtle (application/x-turtle or text/turtle), NQuads (text/x-nquads), JSON-LD(application/ld+json), or RDF/XML (application/rdf+xml).
 
Depending from SPARQL query, following MIME types are recognized in the Accept header, for example:

| Query type | Supported MIMETYPE in Accept header                                                                |
|------------|----------------------------------------------------------------------------------------------------|
| SELECT     | application/sparql-results+xml OR application/sparql-results+json                                  |
| ASK        | application/sparql-results+xml OR text/boolean                                                                                       |
| CONSTRUCT or DESCRIBE | application/rdf+xml OR text/turtle OR application/x-turtle OR text/x-nquads OR application/ld+json |


Please note that the *defaut graph* behaviour is not specified in sparql 1.1,
so some RDF quadstore engines treat it as the union of all named graph, other engines just as an
unamed graph. To keep maximum compatibility **the default graph should not be used**.

+ Parameters
    + kb (required, string, `demo`) ... `id` of the Knowlege base  


+ Model (application/sparql-results+xml)

    See [SPARQL Query Results XML Format](http://www.w3.org/TR/rdf-sparql-XMLres/) for more info.
            
    + Body

            <?xml version='1.0' encoding='UTF-8'?>
            <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
                <head>
                    <variable name='s'/>
                    <variable name='p'/>
                    <variable name='o'/>
                </head>
                <results>
                </results>
            </sparql> 

### SPARQL query via get [GET]

It supports both Sparql Query and 
[Service Description](http://www.w3.org/TR/sparql11-service-description/) protocols.

To get Service description call the end-point withouth any paramethers

+ Parameters
    + query (optional, string, `SELECT%20*%20WHERE%20%7B%3Fs%20%3Fp%20%3Fo%7D`) ... url encoded sparql query.

+ Request

    + Headers
    
            Accept: application/sparql-results+xml
            
+ Response 200

    [SPARQL 1.1 Query][]



### SPARQL query via post [POST]
Post action can be used for queries whose length exceeds the maximum allowed number of characters in a URI.
The body of the request should be same form-encoded parameters of the GET variant.

It supports also unencoded paylout when  Content-Type header is set to "application/sparql-query"



+ Request (application/sparql-query)

    + Headers
    
            Accept: application/sparql-results+xml

    + Body

            SELECT * WHERE {
                ?s ?p ?o
            }
            
+ Response 200

    [SPARQL 1.1 Query][]



## SPARQL 1.1 Update [/{kb}/sparql/update]

This API implements [SPARQL 1.1 protocol update operations](http://www.w3.org/TR/sparql11-protocol/#update-operation) 
for [update language](http://www.w3.org/TR/sparql11-update/) specifications.

SPARQL update endpoint support [http content negotiation](http://en.wikipedia.org/wiki/Content_negotiation) for state representation rendering.

All HTTP requests that are mutative (add or remove) must include a valid Content-Type header set to the MIME type of the request body,
 where “valid” is a valid MIME type for application/sparql-results+xml OR text/boolean .


+ Parameters
    + kb (required, string, `demo`) ... `id` of the Knowlege base  


### SPARQL update via get [GET]

This verbs supports [Service Description](http://www.w3.org/TR/sparql11-service-description/) specification.

+ Request

    + Headers
    
            Accept: text/turtle
            
+ Response 200

            _:node19hbsroj2x226 a <http://www.w3.org/ns/sparql-service-description#Service> ;
                <http://www.w3.org/ns/sparql-service-description#endpoint> "https://hub1.linkeddata.center/test/sparql/update" ;
                <http://www.w3.org/ns/sparql-service-description#supportedLanguage> <http://www.w3.org/ns/sparql-service-description#SPARQL11Update> ;
                <http://www.w3.org/ns/sparql-service-description#defaultEntailmentRegime> <http://www.w3.org/ns/entailment/OWL-Direct> ;
                <http://www.w3.org/ns/sparql-service-description#supportedEntailmentProfile> <http://www.w3.org/ns/owl-profile/RDFS> , <http://www.w3.org/ns/owl-profile/QL> , <http://www.w3.org/ns/owl-profile/RL> , <http://www.w3.org/ns/owl-profile/EL> , <http://www.w3.org/ns/owl-profile/DL> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/RDF_XML> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/RDF_XML> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/Turtle> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/Turtle> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/N3> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/N3> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/N_Triples> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/N_Triples> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/NQuads> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/NQuads> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/Trig> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/Trig> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/Trix> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/Trix> ;
                <http://www.w3.org/ns/sparql-service-description#inputFormat> <http://www.w3.org/ns/formats/JSON_LD> ;
                <http://www.w3.org/ns/sparql-service-description#resultFormat> <http://www.w3.org/ns/formats/JSON_LD> , <http://www.w3.org/ns/formats/SPARQL_Results_XML> , <http://www.w3.org/ns/formats/SPARQL_Results_JSON> , <http://www.w3.org/ns/formats/SPARQL_Results_CSV> , <http://www.w3.org/ns/formats/SPARQL_Results_TSV> ;
                <http://www.w3.org/ns/sparql-service-description#extensionFunction> <http://jena.hpl.hp.com/ARQ/property#textMatch> ;
            
            _:node19hbsroj2x227 a <http://www.w3.org/ns/sparql-service-description#Dataset> .
            
            _:node19hbsroj2x228 a <http://www.w3.org/ns/sparql-service-description#Graph> ;
                <http://rdfs.org/ns/void#triples> "0"^^<http://www.w3.org/2001/XMLSchema#long> .
            
            _:node19hbsroj2x227 <http://www.w3.org/ns/sparql-service-description#defaultGraph> _:node19hbsroj2x228 .
            
            _:node19hbsroj2x229 a <http://www.w3.org/ns/sparql-service-description#Graph> ;
                <http://www.w3.org/ns/sparql-service-description#name> <urn:kees> ;
                <http://rdfs.org/ns/void#triples> "0"^^<http://www.w3.org/2001/XMLSchema#long> .
            
            _:node19hbsroj2x227 <http://www.w3.org/ns/sparql-service-description#namedGraph> _:node19hbsroj2x229 .
            
            _:node19hbsroj2x226 <http://www.w3.org/ns/sparql-service-description#defaultDataset> _:node19hbsroj2x227 .


### SPARQL update via post [POST]
The body of the request should be same form-encoded parameters of the GET variant.

It supports also unencoded paylout when  Content-Type header is set to "application/sparql-update"

+ Parameters
    + update (optional, string, `DROP%20ALL`) ... url encoded sparql query.



+ Request (application/sparql-update)

    + Body

            DROP ALL
            
+ Response 200

    See [SPARQL Query Results XML Format](http://www.w3.org/TR/rdf-sparql-XMLres/) for more info.
            
    + Body

            <?xml version='1.0' encoding='UTF-8'?>
            <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
                <head>
                </head>
                <boolean>true</boolean>
            </sparql>



## Data ingestion activity management [/{kb}/activities{?filter}]

This API allows to populate the knowledge base by driving all four KEES windows 
(Booting, Learning and Reasoning) . 

Ingestion tasks are executed asyncronusly as soon as there are enough 
resources available in the system.

Each ingestion activity is provided with an unique id in the knowledge base. 
The activity state can be inspected before, after and during execution.
Ingestion activity reports are stored in named graphs.
By default, ingestion activity reports are retained for one day before to be purged.

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.


### List activities [GET]
Lists ingestion activities with their status (pending, running, complete, etc). 

+ Parameters
    + filter (optional, string, `running`) ... show only task in a defined status.
    
        + Values
            + `all`
            + `pending`
            + `running`
            + `completed`
            + `rejected`
            + `staled`
            + `error`
            + `tobepurged`



+ Response 200 
            
    + Body
    
            +-----------+-----------------+-------------------------+
            | ?status   | ?activity       | ?plannedTasks           |
            +-----------+-----------------+-------------------------+
            | "pending" | "5524e9cd08584" | "learning => reasoning" |
            +-----------+-----------------+-------------------------+


### Start a data ingestion activity [POST]
Ask for a new kees cycle to be executed as soon as possible.

Accepts following x-www-form-urlencoded vars:

| var       | default| type              | description                         |
|-----------|------- |-------------------|-------------------------------------|
| booting   | false  | 'true' or 'false' | Request booting window processing   |
| learning  | true   | 'true' or 'false' | Request learning window processing  |
| reasoning | true   | 'true' or 'false' | Request reasoning window processing |

+ Request (application/x-www-form-urlencoded)

    + Body

            booting=false&learning=true&reasoning=true
        
+ Response 200
            
    + Body
    
            true

### Delete data ingestion activities [DELETE]

Deletes all pending tasks. With no parameters delete activities that have to be purged. 

+ Parameters
    + filter (optional, string, `tobepurged`) ... delete only task in a defined status.
    
        + Values
            + `all`
            + `pending`
            + `running`
            + `complete`
            + `tobepurged`


            
+ Response 200

        true


## Ingestion activity [/{kb}/activity/{activityId}]

This API shows or delete a specific activity report graph. 

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.


### Show activity [GET]
Display the RDF graph containg all activity ingestion report.


+ Response 200 (text/turtle)
            
    + Body
    
            # TBD


### Delete activity [DELETE]
Deletes the activity ingestion report graph. 

+ Response 200

        true


## User management [/{kb}/user/{user}/pwd]

This API allows to change the user profile used for authentication.

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + kb (required, string, `demo`) ... `id` of the user (same as Knowlege base kb) 
    + user (required, string, `admin`) ... `id` of the user (same as Knowlege base kb)

### Change user password [PUT]
Changes the password of the knowledge admin user.

*Password requirements*:
   at least 6 characters and maximum of 20,
   must contains one digit from 0-9,
   must contains one lowercase characters,
   must contains one uppercase characters,
   must contains one special symbols in the list **@#$%**.
   
+ Request

    + Body
    
            Newpassword#1
            
+ Response 200

    + Body
    
            true

