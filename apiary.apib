FORMAT: 1A

# eKB APIs
![e-artspace logo](http://www.e-artspace.com/home/images/stories/ea/ealogo-small.png)

[eKB](http://www.e-artspace.com/home/service/ekb) is an infrastructure service provided by [E-Artspace](http://www.e-artspace.com) 
as part of its [Linked Data offering](http://linkeddata.center).
It exposes some RESTful APIs and some interactive resources to realize the core of
the [KEES architecture](http://www.e-artspace.com/home/project/kees).


###RESTful APIs overview

| Group          | Resource                | GET | PUT | POST | DELETE |
|----------------|-------------------------|-----|-----|------|--------|
| Job management | /{kb}/jobs              | X   |     | X    | X      |
|                | /{kb}/job/{id}          | X   |     |      | X      |
| SPARQL         | /{kb}/sparql            | X   |     | X    |        |
| Security       | /admin/users/{user}/pwd |     | X   |      |        |

To access eKB APIs  you alway need to provide your credentials using 
[http basic authentication](http://en.wikipedia.org/wiki/Basic_access_authentication).

Beside these, eKB appliances and eKB corporate services allow a transparent access
to backing quadstore specific APIs.
Depending from the configuration of the eKB service you chosed,
you can get benefit of all quadstore vendor web services:

| Quadstore     | APIs documentation URL         |
|---------------|--------------------------------|
| Stardog 2.2.2 | http://docs.stardog.apiary.io/ |



###Typical Server Responses

Following table sumarize typycal http status code returned by APIS

| Code | Description                                                                                     | 
|------|-------------------------------------------------------------------------------------------------|
| 200  | Request was successful                                                                          |
| 201  | Request was successful and the resource was created                                             |
| 202  | Request was successfully queued                                                                 |
| 400  | Indicates parse errors or that the transaction identifier specified for an operation is invalid or does not correspond to a known transaction. |
| 401  | Request is unauthorized.                                                                        |
| 403  | User attempting to perform the operation does not exist, their username or password is invalid, or they do not have the proper credentials to perform the action. |
| 404  | A resource involved in the operation, such as a user or transaction, does not exist.            |
| 409  | A conflict for some database operations; for example, creating a database that already exists.  |
| 500  | An unspecified failure in the server.                                                           |
| 503  | The eKB serve is learnig new resources or is reasoning. Sparql interface is temporary disabled. |

Error representation is based on [ietf specs](http://tools.ietf.org/html/draft-nottingham-http-problem-07).
Here is an example of a 404 error in json representation:

       HTTP/1.1 404 Not found
       Content-Type: application/problem+json
       Content-Language: en

        {
            problemType: "http://dbpedia.org/resource/Category:HTTP_status_codes"
            title: "Job not found"
            detail: "Job report 5441392469671 not found."
            problemInstance: "http://dbpedia.org/resource/HTTP_404"
            httpStatus: 404
        }

# Group SPARQL end-point
Access to the knowledge base.

## SPARQL query [/{db}/sparql{?query}]
This end point implements [SPARQL 1.1 protocol](http://www.w3.org/TR/sparql11-protocol/) 
for [query](http://www.w3.org/TR/sparql11-query/) and [update](http://www.w3.org/TR/sparql11-update/) language specifications.
It also supports [Service Description](http://www.w3.org/TR/sparql11-service-description/) specification.

SPARQL query APIs support [http content negotiation](http://en.wikipedia.org/wiki/Content_negotiation) for state representation rendering.

All HTTP requests that are mutative (add or remove) must include a valid Content-Type header set to the MIME type of the request body,
 where “valid” is a valid MIME type for N-Triples(text/plain), Turtle (application/x-turtle or text/turtle), NQuads (text/x-nquads), JSON-LD(application/ld+json), or RDF/XML (application/rdf+xml).
 
Depending from SPARQL query, following MIME types are recognized in the Accept header:

| Query type | Supported MIMETYPE in Accept header                                                                |
|------------|----------------------------------------------------------------------------------------------------|
| SELECT     | application/sparql-results+xml OR application/sparql-results+json                                  |
| ASK        | text/boolean                                                                                       |
| CONSTRUCT  | application/rdf+xml OR text/turtle OR application/x-turtle OR text/x-nquads OR application/ld+json |

+ Model (application/sparql-results+xml)

    See [SPARQL Query Results XML Format](http://www.w3.org/TR/rdf-sparql-XMLres/) for more info.
            
    + Body

            <?xml version='1.0' encoding='UTF-8'?>
            <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
                <head>
                    <variable name='s'/>
                </head>
                <results>
                    <result>
                        <binding name='s'>
                            <uri>tag:ekb:api:#V1</uri>
                        </binding>
                    </result>
                </results>
            </sparql> 

### SPARQL query via get [GET]
If no query parameter is supplied it returns 
[end-point service Description](http://www.w3.org/TR/sparql11-service-description/) in one of available RDF serialization.

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + db (required, string, `gate1`) ... `id` of the Knowlege base db 
    + query (optional, string, `"SELECT%20%3Fs%20WHERE%20%7BGRAPH%20%3Fg%7B%3Fs%20%3Fp%20%3Fo%7D%7D"`) ... `id` of the Knowlege base db 

+ Request (application/x-www-form-urlencoded)

    + Headers
    
            Accept: application/sparql-results+xml
            
+ Response 200

    [SPARQL query][]



### SPARQL query via post [POST]
Post action can be used for queries whose length exceeds the maximum allowed number of characters in a URI.
The body of the request should be same form-encoded parameters of the GET variant.

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + db (required, string, `gate1`) ... `id` of the Knowlege base db 

+ Request (application/x-www-form-urlencoded)

    + Headers
    
            Accept: application/sparql-results+xml

    + Body

            query=SELECT%20%3Fs%20WHERE%20%7BGRAPH%20%3Fg%7B%3Fs%20%3Fp%20%3Fo%7D%7D
            
+ Response 200

    [SPARQL query][]



# Group Job management
Job management APIs allow to launch learning task that populate the knowledge base. 
Jobs are executed asyncronusly as soon as there are enough resources available in the system.

Following jobs type are supported:
 * **learn**: used to initatie a [KEES](http://www.e-artspace.com/home/project/kees) learning and reasoning window, where new data discovered and learned.

Each job is provided with an unique id known only to the user that posted it. 
The job state can be inspected before and during execution. 
After execution the job status contains the full execution log (job execution report).

Job Collection APIs support [http content negotiation](http://en.wikipedia.org/wiki/Content_negotiation) for state representation rendering.
Following MIME types are supported in the Accept header: text/html, application/rdf+xml, text/turtle, application/x-turtle, text/x-nquads OR application/ld+json 

You can use *_output=mimetype* parameter in any URL to override http content negotiation 
and forcing your preferred resource representation. 
The mimetype must be url encoded (i.e. _output=application%2Fjson).


## Job Collection [/{db}/jobs]

+ Model (application/json)

    Json representation of Jobs Collection Resource. The Jobs resources in collections are embedded. Note the embedded Jobs resource are incomplete representations of the Jobs in question. Use the respective Jobs link to retrieve its full representation.

    + Headers
    
            Link: <jobs>; rel="self"

    + Body

            [  
               {  
                  "id":"5442847218008",
                  "timestamp":1413645426,
                  "lastUpdate":"2014-10-18T15:17:06+00:00",
                  "reportSize":0,
                  "uri":"job\/5442847218008",
                  "status":"waiting"
               },
               {  
                  "id":"5443bd70785dc",
                  "timestamp":1413725552,
                  "lastUpdate":"2014-10-19T13:32:32+00:00",
                  "reportSize":0,
                  "uri":"job\/5443bd70785dc",
                  "status":"ready"
               },
               {  
                  "id":"5443bd792b8fa",
                  "timestamp":1413725561,
                  "lastUpdate":"2014-10-19T13:32:41+00:00",
                  "reportSize":0,
                  "uri":"job\/5443bd792b8fa",
                  "status":"learning"
               }
            ]   

### List all jobs [GET]
Lists your job.  By default, completed jobs (with their execution report) are retained for one day before to be deleted.

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + db (required, string, `"gate1"`) ... `id` of the Knowlege base db 

+ Request

    + Headers
        
            Accept: application/json
 
+ Response 200

    [Job Collection][]


### Create a new job [POST]
Creates a new learning Job to be executed as soon as possible.

Accepts following x-www-form-urlencoded vars:

| var   | default value | ver type | description |
|-------|---------------|----------|-------------|
| mode | incremental | 'incremental' or 'reset' | "incremental" adds data to KB, "reset" clear knowledge (tabula rasa) before learning. |
| db | -- | string  | the knowledge db id  |
| ds | pings://ping.linkeddata.center/ | url | the uri of the resource to load |
| graph | provenance | "provenance" or "default" or url | RDF grapf to be use for data: with 'provenance' uses the uri of data provenance to name graph, with 'default' uses the default graph for all data,otherwhise you can specify an uri for the graph |

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + db (required, string, `"gate1"`) ... `id` of the Knowlege base db 

+ Request (application/x-www-form-urlencoded)

    + Headers
        
            Accept: application/json
    
    + Body

            type=learn&db=myDb&index=pings
        
+ Response 201 (application/json)

    + Headers
        
            Location: job/5443d6992d4f3 
            Link: <job/5443d6992d4f3>; rel="details",</admin/jobs>; rel="self"
        
    + Body
    
            "5443bd70785dc"

### Delete all jobs [DELETE]
Deletes all your jobs, both the waiting to be executed and the completed ones.

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + db (required, string, `gate1`) ... `id` of the Knowlege base db 

+ Request

    + Headers
        
            Accept: application/json
            
+ Response 200 (application/json)

        [ "5443bd70785dc", "5442847218008", "5443bd792b8fa" ]



## Job [/{db}/job/{id}]
A single Job object with all its details.

+ Parameters
    + db (required, string, `gate1`) ... `id` of the Knowlege base db 
    + id (required, string, `"5443bd792b8fa"`) ... `id` of the Job 

+ Model (application/json)
    Json representation of Jobs Resource.
    
    + Headers

            Link: <job>; rel="self",<../jobs>; rel="list"

    + Body
    
            {
               "id":"5442847218008",
               "timestamp":1413645426,
               "lastUpdate":"2014-10-18T15:17:06+00:00",
               "reportSize":0,
               "uri":"5442847218008",
               "status":"waiting",
               "execStatus":"-1",
               "report":"Data not yet available. Please wait a bit and retry"
            }


### Retrieve a Job [GET]
Get a job state representation, completed with all available execution information (job report).

+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + db (required, string, `gate1`) ... `id` of the Knowlege base db 

+ Request

    + Headers
        
            Accept: application/json

+ Response 200

    [Job][]


### Delete a Job [DELETE]
+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + db (required, string, `gate1`) ... `id` of the Knowlege base db 

+ Request

    + Headers
        
            Accept: application/json

+ Response 200 (application/json)

        "5443bd70785dc"


# Group Security
Secure some knowledge base aspects.

## User password [/admin/users/{user}/pwd]
Change the password of an existing user. Note that in eKB SaaS service username is the same of knowledge base id (in Appliances an corporate models it can be different).

### Change user password [PUT]
+ Authorization ... [Base64](http://en.wikipedia.org/wiki/Base64) encoded string literal in form _"username:password"_ preceeded by authorization method and its space.

+ Parameters
    + user (required, string, `gate1`) ... `id` of the user (often same as Knowlege base db) 

+ Request

    + Body
    
            newpassword
            
+ Response 200
